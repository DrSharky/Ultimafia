##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
server {
	root /usr/share/nginx/html;
	index index.html index.htm index.nginx-debian.html;
	
	location ~* \.(js|css|png|jpg|jpeg|gif|svg|woff|woff2|webp)$ {
		root /usr/share/nginx/html;
		expires 3d;
		add_header Cache-Control "public, 259200, immutable";
	}

	location /chatSocket {
		proxy_pass http://backend:2999/;
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;
		#proxy_set_header Host $host;
########proxy_cache my_cache;
########proxy_cache_valid 200 30m;
########proxy_cache_methods GET HEAD;
########proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
########proxy_cache_bypass $http_upgrade;
	}

	location /3010 {
	    proxy_pass http://backend:3010/;
        proxy_http_version 1.1;
	    proxy_set_header Upgrade $http_upgrade;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;
	    #proxy_set_header Host $host;
########proxy_cache my_cache;
########proxy_cache_valid 200 30m;
########proxy_cache_methods GET HEAD;
########proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
########proxy_cache_bypass $http_upgrade;
        }

	location /3011 {
		proxy_pass http://fluffy-space-eureka-69pxx65x7q4hq6q-3011.app.github.dev/;
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Host $host;
########proxy_cache my_cache;
########proxy_cache_valid 200 30m;
########proxy_cache_methods GET HEAD;
########proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
########proxy_cache_bypass $http_upgrade;
	}    
    location / {
        #STAYS HTTP, NOT HTTPS
        proxy_pass              http://backend:3000/;
        proxy_pass_request_body on;
        proxy_set_header        Host              $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;
########proxy_cache my_cache;
########proxy_cache_valid 200 30m;
########proxy_cache_methods GET HEAD;
########proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
########proxy_cache_bypass $http_upgrade;
        
########proxy_http_version 1.1;
########proxy_set_header Upgrade $http_upgrade;
    }

	# pass PHP scripts to FastCGI server
	#
	#location ~ \.php$ {
	#	include snippets/fastcgi-php.conf;
	#
	#	# With php-fpm (or other unix sockets):
	#	fastcgi_pass unix:/run/php/php7.4-fpm.sock;
	#	# With php-cgi (or other tcp sockets):
	#	fastcgi_pass 127.0.0.1:9000;
	#}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}
	
	##
	

    #listen 443 ssl http2; # managed by Certbot
    #ssl_certificate /etc/letsencrypt/live/ultimafia.com/fullchain.pem; # managed by Certbot
    #ssl_certificate_key /etc/letsencrypt/live/ultimafia.com/privkey.pem; # managed by Certbot
    #include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    #ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot



}

server {
    if ($host = backend) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


	server_name backend;
    listen 80;
    return 404; # managed by Certbot


}